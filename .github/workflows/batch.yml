name: Batch
on: [push]
jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      batches: ${{ steps.store-batches-as-vars.outputs.batches }}
      batchIds: ${{ steps.store-batches-as-vars.outputs.batchIds }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2 #for caching and speeding up
      - run: npm install
      - id: define-batches
        name: Define Test Batches
        run: node ./createTestSets.js
      - id: store-batches-as-vars
        name: Store Batches into Variables
        run: |
          cat prepareTestSets.txt | jq -cM 'to_entries | map(.key)'
          echo "::set-output name=batches::$(cat prepareTestSets.txt)"
          # read the tests array, convert to entries and pull keys as batch ids
          echo "::set-output name=batchIds::$(cat prepareTestSets.txt | jq -cM 'to_entries | map(.key)')"
  test:
    runs-on: ubuntu-latest
    name: Set (${{ matrix.value }})
    needs:
      - setup
    strategy:
      matrix:
        value: ${{ fromJson(needs.setup.outputs.batchIds) }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2 #for caching and speeding up
      - run: npm install
      - name: jest
        run: echo $BATCHES | jq '.[${{ matrix.value }}] | .[] | @text ' | npx jest
        env:
          BATCHES: ${{ needs.setup.outputs.batches }}
